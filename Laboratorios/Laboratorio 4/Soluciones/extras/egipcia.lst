     Assembly listing for: egipcia.mas
                Assembled: Wed Oct 15 20:36:08 GMT-05:00 2025

         |                                      / Egyptian Fraction Decomposition (Multiple Cases)
         |                                      / Author: Juan Esteban Sánchez García
         |                                      / Description: Reads multiple test cases (a, b) and performs
         |                                      / Egyptian Fraction decomposition using DIV and MULT subroutines.
         |                                      
         |               ORG 100                 
         |                                      
         |                                      / ---------------------------
         |                                      / Read number of test cases
         |                                      / ---------------------------
100 5000 |               INPUT                   
101 218B |               STORE cases             
         |                                      
         |                                      / ---------------------------
         |                                      / Main loop: process each case
         |                                      / ---------------------------
102 118B |  loop_cases   LOAD cases              
103 8400 |               SKIPCOND 400           / If cases == 0, go to end
104 9106 |               JUMP process_case       
105 9111 |               JUMP end_program        
         |                                      
         |                                      / ---------------------------
         |                                      / Read inputs a and b, call egypt subroutine
         |                                      / ---------------------------
106 5000 |  process_case INPUT                   
107 218C |               STORE a                 
108 5000 |               INPUT                   
109 218D |               STORE b                 
10A 0112 |               JNS egypt              / Egyptian decomposition
         |                                      
         |                                          / Print 0 to mark the end of this case
10B 1198 |               LOAD zero               
10C 6000 |               OUTPUT                  
         |                                      
         |                                          / Decrement remaining cases
10D 118B |               LOAD cases              
10E 4197 |               SUBT one                
10F 218B |               STORE cases             
110 9102 |               JUMP loop_cases         
         |                                      
         |                                      / ---------------------------
         |                                      / End of program
         |                                      / ---------------------------
111 7000 |  end_program  HALT                    
         |                                      
         |                                      
         |                                      / =====================================================
         |                                      / Subroutine: Egyptian Fraction Decomposition (egypt)
         |                                      / =====================================================
112 0000 |  egypt        HEX 0                   
113 118C |  begin_egypt  LOAD a                  
114 8400 |               SKIPCOND 400           / If a == 0, check b
115 9117 |               JUMP b_equal_0          
116 9166 |               JUMP end_egypt          
         |                                      
117 118D |  b_equal_0    LOAD b                  
118 8400 |               SKIPCOND 400           / If b == 0, skip next
119 911B |               JUMP if_1               
11A 9166 |               JUMP end_egypt          
         |                                      
         |                                      / Case 1: If b divides a exactly
11B 1198 |  if_1         LOAD zero               
11C 2195 |               STORE div_times         
11D 2196 |               STORE div_mod           
11E 118D |               LOAD b                  
11F 2193 |               STORE div_a             
120 118C |               LOAD a                  
121 2194 |               STORE div_b             
122 0167 |               JNS div                 
123 218E |               STORE c                 
124 118E |               LOAD c                  
125 8400 |               SKIPCOND 400           / If remainder == 0
126 912A |               JUMP if_2               
127 1195 |               LOAD div_times          
128 6000 |               OUTPUT                  
129 9166 |               JUMP end_egypt          
         |                                      
         |                                      / Case 2: If a divides b exactly
12A 1198 |  if_2         LOAD zero               
12B 2195 |               STORE div_times         
12C 2196 |               STORE div_mod           
12D 118C |               LOAD a                  
12E 2193 |               STORE div_a             
12F 118D |               LOAD b                  
130 2194 |               STORE div_b             
131 0167 |               JNS div                 
132 218E |               STORE c                 
133 118E |               LOAD c                  
134 8400 |               SKIPCOND 400            
135 9139 |               JUMP if_3               
136 1195 |               LOAD div_times          
137 6000 |               OUTPUT                  
138 9166 |               JUMP end_egypt          
         |                                      
         |                                      / Case 3: General recursive step
139 118C |  if_3         LOAD a                  
13A 418D |               SUBT b                  
13B 8800 |               SKIPCOND 800           / If a >= b
13C 9149 |               JUMP egypt_else         
13D 1198 |               LOAD zero               
13E 2195 |               STORE div_times         
13F 2196 |               STORE div_mod           
140 118C |               LOAD a                  
141 2193 |               STORE div_a             
142 118D |               LOAD b                  
143 2194 |               STORE div_b             
144 0167 |               JNS div                 
145 218C |               STORE a                 
146 1195 |               LOAD div_times          
147 6000 |               OUTPUT                  
148 9113 |               JUMP begin_egypt        
         |                                      
         |                                      / Case 4: a < b
149 1198 |  egypt_else   LOAD zero               
14A 2195 |               STORE div_times         
14B 2196 |               STORE div_mod           
14C 2192 |               STORE mult_acum         
14D 118D |               LOAD b                  
14E 2193 |               STORE div_a             
14F 118C |               LOAD a                  
150 2194 |               STORE div_b             
151 0167 |               JNS div                 
152 1195 |               LOAD div_times          
153 3197 |               ADD one                 
154 218F |               STORE n                 
155 6000 |               OUTPUT                  
         |                                      
         |                                          / a = a * n - b
156 118C |               LOAD a                  
157 2190 |               STORE mult_a            
158 118F |               LOAD n                  
159 2191 |               STORE mult_b            
15A 017E |               JNS mult                
15B 418D |               SUBT b                  
15C 218C |               STORE a                 
         |                                      
         |                                          / b = b * n
15D 1198 |               LOAD zero               
15E 2192 |               STORE mult_acum         
15F 118D |               LOAD b                  
160 2190 |               STORE mult_a            
161 118F |               LOAD n                  
162 2191 |               STORE mult_b            
163 017E |               JNS mult                
164 218D |               STORE b                 
         |                                      
165 9113 |               JUMP begin_egypt        
         |                                      
166 C112 |  end_egypt    JUMPI egypt             
         |                                      
         |                                      
         |                                      / =====================================================
         |                                      / Subroutine: Integer Division (div)
         |                                      / Description: div_a / div_b = quotient (div_times),
         |                                      / remainder (div_mod)
         |                                      / =====================================================
167 0000 |  div          HEX 0                   
168 1193 |  loop_div     LOAD div_a              
169 8800 |               SKIPCOND 800            
16A 9172 |               JUMP fix_div            
16B 1193 |               LOAD div_a              
16C 4194 |               SUBT div_b              
16D 2193 |               STORE div_a             
16E 1195 |               LOAD div_times          
16F 3197 |               ADD one                 
170 2195 |               STORE div_times         
171 9168 |               JUMP loop_div           
         |                                      
172 1193 |  fix_div      LOAD div_a              
173 8000 |               SKIPCOND 000            
174 917C |               JUMP end_div            
175 1195 |               LOAD div_times          
176 4197 |               SUBT one                
177 2195 |               STORE div_times         
178 1193 |               LOAD div_a              
179 3194 |               ADD div_b               
17A 2196 |               STORE div_mod           
17B 917C |               JUMP end_div            
         |                                      
17C 1196 |  end_div      LOAD div_mod            
17D C167 |               JUMPI div               
         |                                      
         |                                      
         |                                      / =====================================================
         |                                      / Subroutine: Multiplication (mult)
         |                                      / Description: mult_a * mult_b = mult_acum
         |                                      / =====================================================
17E 0000 |  mult         HEX 0                   
17F 1190 |  loop_mult    LOAD mult_a             
180 8800 |               SKIPCOND 800            
181 9189 |               JUMP end_mult           
182 1192 |               LOAD mult_acum          
183 3191 |               ADD mult_b              
184 2192 |               STORE mult_acum         
185 1190 |               LOAD mult_a             
186 4197 |               SUBT one                
187 2190 |               STORE mult_a            
188 917F |               JUMP loop_mult          
         |                                      
189 1192 |  end_mult     LOAD mult_acum          
18A C17E |               JUMPI mult              
         |                                      
         |                                      
         |                                      / =====================================================
         |                                      / Variables
         |                                      / =====================================================
18B 0000 |  cases        DEC 0                  / Number of test cases
18C 0000 |  a            DEC 0                  / Numerator
18D 0000 |  b            DEC 0                  / Denominator
18E 0000 |  c            DEC 0                  / Remainder holder
18F 0000 |  n            DEC 0                  / Multiplier in Egyptian step
         |                                      
190 0000 |  mult_a       DEC 0                  / Operand A for multiplication
191 0000 |  mult_b       DEC 0                  / Operand B for multiplication
192 0000 |  mult_acum    DEC 0                  / Accumulator for product
         |                                      
193 0000 |  div_a        DEC 0                  / Dividend
194 0000 |  div_b        DEC 0                  / Divisor
195 0000 |  div_times    DEC 0                  / Quotient
196 0000 |  div_mod      DEC 0                  / Remainder
         |                                      
197 0001 |  one          DEC 1                   
198 0000 |  zero         DEC 0                   
         |                                      
         |               END                     

Assembly successful.

         SYMBOL TABLE
         --------------------------------------------------------
          Symbol       | Defined | References 
         --------------+---------+-------------------------------
          a            |   18C   | 107, 113, 120, 12D, 139, 140, 
                       |         | 145, 14F, 156, 15C
          b            |   18D   | 109, 117, 11E, 12F, 13A, 142, 
                       |         | 14D, 15B, 15F, 164
          b_equal_0    |   117   | 115
          begin_egypt  |   113   | 148, 165
          c            |   18E   | 123, 124, 132, 133
          cases        |   18B   | 101, 102, 10D, 10F
          div          |   167   | 122, 131, 144, 151, 17D
          div_a        |   193   | 11F, 12E, 141, 14E, 168, 16B, 
                       |         | 16D, 172, 178
          div_b        |   194   | 121, 130, 143, 150, 16C, 179
          div_mod      |   196   | 11D, 12C, 13F, 14B, 17A, 17C
          div_times    |   195   | 11C, 127, 12B, 136, 13E, 146, 
                       |         | 14A, 152, 16E, 170, 175, 177
          egypt        |   112   | 10A, 166
          egypt_else   |   149   | 13C
          end_div      |   17C   | 174, 17B
          end_egypt    |   166   | 116, 11A, 129, 138
          end_mult     |   189   | 181
          end_program  |   111   | 105
          fix_div      |   172   | 16A
          if_1         |   11B   | 119
          if_2         |   12A   | 126
          if_3         |   139   | 135
          loop_cases   |   102   | 110
          loop_div     |   168   | 171
          loop_mult    |   17F   | 188
          mult         |   17E   | 15A, 163, 18A
          mult_a       |   190   | 157, 160, 17F, 185, 187
          mult_acum    |   192   | 14C, 15E, 182, 184, 189
          mult_b       |   191   | 159, 162, 183
          n            |   18F   | 154, 158, 161
          one          |   197   | 10E, 153, 16F, 176, 186
          process_case |   106   | 104
          zero         |   198   | 10B, 11B, 12A, 13D, 149, 15D
         --------------------------------------------------------

